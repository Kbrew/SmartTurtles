-- Config
local author = "Kbrew"
local project = "Advanced-Programs"
local branch = "master"

-- Functions
function loadTable(name)
	local file = fs.open(name,"r")
	local data = file.readAll()
	file.close()
	return textutils.unserialize(data)
end

function saveTable(table,name)
	local file = fs.open(name,"w")
	file.write(textutils.serialize(table))
	file.close()
end

function getLink(file)
	return "https://raw.github.com/" .. author .. "/" .. project .. "/" .. branch .. "/" .. file
end

function download(file, name)
	print("Downloading, " .. file)
	local data = http.get(getLink(file))
	if data then
		print(file .. " downloaded")
		local file = fs.open(name,"w")
		file.write(data.readAll())
		file.close()
		return true
	end
end

function update(file, path)
	if fs.exists(file) then
		fs.delete(file)
	end
	download(file, path)
end

function updatePrograms(force, programs)
	print("Checking for Updates...")
	if download("config", "tmpconfig") then
		tmpconfig = loadTable("tmpconfig")
		if fs.exists("apconfig") then
			config = loadTable("apconfig")
			for key,value in pairs(tmpconfig) do
				if force or (tmpconfig[key]["version"] > config[key]["version"]) then
					print("Updating " .. key .. " version " .. config[key]["version"] .. " to " .. tmpconfig[key]["version"])
					update(key, tmpconfig[key]["path"])			
				end
			end
		else
			print("No config file was found.")
			for key,value in pairs(tmpconfig) do
				print("Downloading " .. key .. " version " .. tmpconfig[key]["version"])
			end
		end
		fs.delete("apconfig")
		saveTable(tmpconfig, "apconfig")
		fs.delete("tmpconfig")
	else
		print("Unable to connect to http://github.com/")
	end
end

-- RUN
local args = {...}
local force = false
local programsToUpdate = nil
for arg in args do
	if arg == "force" then
		force = true
	else
		if not programsToUpdate then
			programsToUpdate = {}
		end
		programsToUpdate[#programsToUpdate + 1] = arg
	end
end

updatePrograms(force, programsToUpdate)